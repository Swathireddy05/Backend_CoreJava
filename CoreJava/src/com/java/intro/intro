I am Swathi Surikanti currently working with Premier health Care as a Full Stack Java Developer.
I have 10 years of professional experience in Enterprise application development.
I have worked in several domains such as Insurance, Banking and Healthcare.
As a Full Stack developer, I used java for backend along with various frameworks like React JS and used Javascript for the frontend. 
In my whole career I have used many technologies in backend like Java8, Spring, Springboot and frontend technologies like React, Angular, HTML, CSS, JS, and used frameworks
like bootstarp and jquery and Data Base includes SQL and NoSQL like MYSQL, Oracle, MongoDB and Kuberneteves and also cloud technologies like AWS includes EC2, SNS, RDS and Cloud Watch and latest CI/CD tools for deployment purpose.
Involved in complete SDLC from inception, planning, design, coding and testing to project closure mainly in the intranet,
Internet and standalone application design, development, maintenance and production support in n-tier architecture. At present we are working in the Agile Methodology
as a 2 week scrum master using the JIRA tool.

PROJECT:
I worked on Client transfer application (CTA) which is an intranet application, which used to facilitate various kinds
of money transfer transactions that are ACH, Cheques, Wires, Journals. We designed our UI on single page application using Angular 
and we have separate screens for each type of money transfer transactions that our field officers, financial advisors, 
bank specialists can use. In backend we have microservices for all different kind of transactions and there are hosted on cloud. 
We used AWS, Relational DB which are sequel server DB instances. We also have Redis cache in front of all our DBs which handle all 
our read operations. We have separate DB instances for all read and write operations. And all the microservices which are hosted 
on AWS are hosted on auto scaling group, each microservices have their own scaling policies which are auto scaling group policies (JSON policies) 
to scale in and scale out instances
